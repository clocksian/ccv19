buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
    }
}

allprojects {
    group = 'com.ninja-squad'
}

subprojects { subProject ->
    apply plugin : 'java'
    apply plugin : 'signing'
    apply plugin : 'osgi'
    apply plugin : 'checkstyle'
    apply plugin : 'maven-publish'
    apply plugin : 'com.jfrog.bintray'

    version = rootProject.version
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
    }

    task checkJavaVersion << {
        if (!JavaVersion.current().isJava8()) {
            String message = "ERROR: Java 1.8 required but " +
                             JavaVersion.current() +
                             " found. Change your JAVA_HOME environment variable.";
            throw new IllegalStateException(message);
        }
    }
    compileJava.dependsOn checkJavaVersion

    subProject.ext.sharedManifest = manifest {
        attributes(['Implementation-Title': project.name,
                    'Implementation-Version': project.version,
                    'Implementation-Vendor': 'ninja-squad.com'])
    }

    subProject.jar {
        manifest {
            from subProject.ext.sharedManifest
            instruction 'Bundle-Vendor', 'ninja-squad.com'
        }
    }

    subProject.test {
        testLogging {
            exceptionFormat = 'full'
        }
    }

    checkstyle {
        sourceSets = [sourceSets.main]
        configProperties = [
            'headerFile': rootProject.file('config/checkstyle/java.header')
        ]
    }

    subProject.checkstyleMain << {
        ant.xslt(in: reports.xml.destination,
                 style: rootProject.file('config/checkstyle/checkstyle-noframes-sorted.xsl'),
                 out: new File(reports.xml.destination.parent, 'main.html'))
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
        manifest {
            from sharedManifest
        }
    }

    artifacts {
        archives sourcesJar
    }

    subProject.publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom.withXml {
                    def root = asNode()
                    def xml = """
                    <root>
                        <name>${project.name}</name>
                        <description>${project.description}</description>
                        <url>http://dbsetup.ninja-squad.com/</url>
                        <organization>
                            <name>Ninja Squad</name>
                            <url>http://ninja-squad.com</url>
                        </organization>
                        <licenses>
                            <license>
                                <name>MIT License</name>
                                <url>http://dbsetup.ninja-squad.com/license.html</url>
                                <distribution>repo</distribution>
                            </license>
                        </licenses>
                        <developers>
                            <developer>
                                <id>jnizet</id>
                                <name>Jean-Baptiste Nizet</name>
                                <email>jb@ninja-squad.com</email>
                            </developer>
                        </developers>
                        <scm>
                            <connection>scm:git:git://github.com/Ninja-Squad/DbSetup</connection>
                            <developerConnection>scm:git:git://github.com/Ninja-Squad/DbSetup</developerConnection>
                            <url>https://github.com/Ninja-Squad/DbSetup</url>
                        </scm>
                    </root>
                    """

                    def parser =  new XmlParser()
                    def rootNode = parser.parseText(xml)
                    rootNode.children().each {
                        root.append(it)
                    }

                    asNode().dependencies.'*'.findAll() {
                        it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                            dep.name == it.artifactId.text()
                        }
                    }.each { it.scope*.value = 'compile'}
                }
            }
        }
        repositories {
            maven {
                url "$buildDir/repo"
            }
        }
    }

    bintray {
        user = 'ninjasquad'
        key = rootProject.findProperty('bintray.key')
        publications = ['mavenJava']
        publish = true
        pkg {
            repo = 'maven'
            name = subProject.name
            desc = subProject.description
            websiteUrl = 'http://dbsetup.ninja-squad.com'
            issueTrackerUrl = 'https://github.com/Ninja-Squad/DbSetup/issues'
            vcsUrl = 'https://github.com/Ninja-Squad/DbSetup/'
            licenses = ['MIT']
            version {
                gpg {
                    sign = true
                    passphrase = rootProject.findProperty('signing.password')
                }
                mavenCentralSync {
                    sync = true
                    user = rootProject.findProperty('sonatypeUserName')
                    password = rootProject.findProperty('sonatypePassword')
                }
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}
